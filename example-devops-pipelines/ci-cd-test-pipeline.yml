# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '54b039cf-3be1-43ab-bae2-ad1002ec6124'
  imageRepository: 'backend'
  containerRegistry: 'kubdemo.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildNumber)'
  imagePullSecretDev: 'kubdemoc0b9-auth'
  imagePullSecretTest: 'kubdemoa1b4-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
- stage: Test
  displayName: Test stage
  jobs:
  - job: Test
    displayName: Test
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Npm@1
      displayName: "NPM Install"
      inputs:
        command: 'install'

    - script: npm test
      displayName: "Run Tests"

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: JUnit
        testResultsFiles: '**/test-results.xml'
        
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests

    - upload: test.sh
      artifact: tests

- stage: DeployToDev
  displayName: Deploy To Dev stage
  dependsOn: Build

  jobs:
  - deployment: DeployToDev
    displayName: Deploy To Dev
    pool:
      vmImage: $(vmImageName)
    environment: 'backend.dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecretDev)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecretDev)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: TestDeployment
  displayName: Test Deployment stage
  dependsOn: DeployToDev

  jobs:
  - deployment: TestDeployment
    displayName: Test Deployment
    pool:
      vmImage: $(vmImageName)
    environment: 'backend.dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubectlInstaller@0
            inputs:
              kubectlVersion: 'latest'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Tieto DDB Ops Development(6e8e34b9-dd92-42d1-a3da-a69d0645ec16)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az aks get-credentials --resource-group demonstration --name kube-demo'

          - task: ShellScript@2
            inputs:
              scriptPath: $(Pipeline.Workspace)/tests/test.sh

- stage: DeployToTest
  displayName: Deploy to Test stage
  dependsOn: TestDeployment

  jobs:
  - deployment: DeployToTest
    displayName: Deploy to Test
    pool:
      vmImage: $(vmImageName)
    environment: 'backend.test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecretTest)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecretTest)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)